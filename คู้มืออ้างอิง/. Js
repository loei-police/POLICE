Cleanup hook, default no-op implementation.

radio.block.factory(name[, parent_class=nil])
Block class factory.

Arguments
name (string): Block name
parent_class (class): Inherited parent class
Example
local MyBlock = radio.block.factory("MyBlock")

function MyBlock:instantiate(a, b)
    self.param = a + b

    self:add_type_signature({radio.block.Input("in", radio.types.Float32)},
                            {radio.block.Output("out", radio.types.Float32)})
end

function MyBlock:initialize()
    -- Differentiated data type and sample rate dependent initialization
end

function MyBlock:process(x)
    return x
end
ลัวเรดิโอ
 v0.11.0
GitHub
รายชื่อผู้รับจดหมาย
ใหม่กับ SDR หรือไม่?
เอกสารประกอบ
การติดตั้ง
การเริ่มต้น
การสร้างบล็อค
การฝัง LuaRadio
สถาปัตยกรรม
การเปรียบเทียบกับ GNU Radio
ฮาร์ดแวร์ที่รองรับ
แอปพลิเคชันในตัว
คู่มืออ้างอิง
แผนงานโครงการ
ตัวอย่าง
ดับเบิลยูบีเอฟเอ็ม โมโน
ดับเบิลยูบีเอฟเอ็ม สเตอริโอ
เอ็นบีเอฟเอ็ม
AX.25
POCSAG
อาร์ดีเอส
AM (ซองจดหมาย)
AM (ซิงโครนัส)
เอสเอสบี
โมดูเลเตอร์ WAV SSB
ตัวแปลงไฟล์ IQ
เกณฑ์มาตรฐาน
v@sergeev.io


rtlsdr_am_synchronous.lua
ตัวอย่างนี้คือเครื่องรับวิทยุ AM ซึ่งใช้วงจรล็อกเฟสลูปสำหรับการดีมอดูเลตแบบซิงโครนัส สามารถใช้ฟังสถานีออกอากาศในย่านความถี่ MF ( AM Broadcast ) และ HF ( Shortwave Broadcast ) รวมถึงการสื่อสารทางการบินใน ย่านความถี่ VHF เครื่อง รับใช้ RTL-SDR เป็นแหล่งสัญญาณ SDR เล่นเสียงด้วย PulseAudio และแสดงกราฟแบบเรียลไทม์สองกราฟ ได้แก่ สเปกตรัม RF และสเปกตรัมเสียงที่ดีมอดูเลต

ตัวอย่างนี้ต้องใช้ตัวแปลง RF อัปคอนเวอร์เตอร์เพื่อฟังสถานีบนแบนด์ HF และ MF ด้วย RTL-SDR

องค์ประกอบเดมอดูเลเตอร์แบบซิงโครนัส AM นี้พร้อมใช้งานใน LuaRadio ในรูปแบบ AMSynchronousDemodulatorบล็อก

 

กราฟการไหล


แหล่งที่มา
local radio = require('radio')

if #arg < 1 then
    io.stderr:write("Usage: " .. arg[0] .. " <frequency>\n")
    os.exit(1)
end

local frequency = tonumber(arg[1])
local ifreq = 50e3
local bandwidth = 5e3

-- Blocks
local source = radio.RtlSdrSource(frequency - ifreq, 1102500)
local rf_decimator = radio.DecimatorBlock(5)
local if_filter = radio.ComplexBandpassFilterBlock(129, {ifreq - bandwidth, ifreq + bandwidth})
local pll = radio.PLLBlock(1000, ifreq - 100, ifreq + 100)
local mixer = radio.MultiplyConjugateBlock()
local am_demod = radio.ComplexToRealBlock()
local dcr_filter = radio.SinglepoleHighpassFilterBlock(100)
local af_filter = radio.LowpassFilterBlock(128, bandwidth)
local af_downsampler = radio.DownsamplerBlock(10)
local af_gain = radio.AGCBlock('slow')
local sink = os.getenv('DISPLAY') and radio.PulseAudioSink(1) or radio.WAVFileSink('am_synchronous.wav', 1)

-- Plotting sinks
local plot1 = radio.GnuplotSpectrumSink(2048, 'RF Spectrum', {xrange = {ifreq - 3*bandwidth,
                                                                        ifreq + 3*bandwidth},
                                                              yrange = {-120, -40}})
local plot2 = radio.GnuplotSpectrumSink(2048, 'AF Spectrum', {yrange = {-120, -40},
                                                              xrange = {0, bandwidth},
                                                              update_time = 0.05})

-- Connections
local top = radio.CompositeBlock()
top:connect(source, rf_decimator, if_filter)
top:connect(if_filter, pll)
top:connect(if_filter, 'out', mixer, 'in1')
top:connect(pll, 'out', mixer, 'in2')
top:connect(mixer, am_demod, dcr_filter, af_filter, af_downsampler, af_gain, sink)
if os.getenv('DISPLAY') then
    top:connect(rf_decimator, plot1)
    top:connect(af_downsampler, plot2)
end

top:run()
การใช้งาน
Usage: examples/rtlsdr_am_synchronous.lua <frequency>
การรันตัวอย่างนี้ในสภาพแวดล้อมแบบไม่มีส่วนหัวจะยับยั้งการพล็อตและบันทึกเสียงลงในไฟล์am_synchronous.wavWAV

ตัวอย่างการใช้งาน
ฟังWWVที่ความถี่ 5 MHz (ด้วยอัปคอนเวอร์เตอร์ 125 MHz):

$ ./luaradio examples/rtlsdr_am_synchronous.lua 130e6
ฟังสถานีวิทยุ AM ที่ความถี่ 560 kHz (ด้วยอัปคอนเวอร์เตอร์ 125 MHz):

$ ./luaradio examples/rtlsdr_am_synchronous.lua 125.560e6
© Vanya A. Sergeev, 2016-2021 — สร้างด้วยJekyllธีมที่อิงจากLagom
